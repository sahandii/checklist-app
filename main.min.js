class Model{constructor(){this.todos=JSON.parse(localStorage.getItem("todos"))||[]}bindTodoListChanged(callback){this.onTodoListChanged=callback}_commit(todos){this.onTodoListChanged(todos),localStorage.setItem("todos",JSON.stringify(todos))}addTodo(todoText){const todo={id:this.todos.length>0?this.todos[this.todos.length-1].id+1:1,text:todoText,complete:!1};this.todos.push(todo),this._commit(this.todos)}editTodo(id,updatedText){this.todos=this.todos.map(todo=>todo.id===id?{id:todo.id,text:updatedText,complete:todo.complete}:todo),this._commit(this.todos)}deleteTodo(id){this.todos=this.todos.filter(todo=>todo.id!==id),this._commit(this.todos)}toggleTodo(id){this.todos=this.todos.map(todo=>todo.id===id?{id:todo.id,text:todo.text,complete:!todo.complete}:todo),this._commit(this.todos)}}class View{constructor(){this.todoList=document.querySelector(".todo-item--container"),this.form=document.querySelector("form"),this.input=document.querySelector("input"),this._temporaryTodoText="",this._initLocalListeners()}bindAddTodo(handler){this.form.addEventListener("submit",event=>{event.preventDefault(),this._todoText?(handler(this._todoText),this._resetInput()):console.log("Write something!")})}displayTodos(todos){for(;this.todoList.firstChild;)this.todoList.removeChild(this.todoList.firstChild);if(0===todos.length){const emptyTodo='\n\t\t\t\t<div class="empty-message px-3 text-center">\n\t\t\t\t\t<h4>Let\'s get some work done! &#10548;</h4>\n\t\t\t\t</div>\n\t\t\t';this.todoList.innerHTML+=emptyTodo}else todos.forEach(todo=>{const todoItem=`\n\t\t\t\t<div id="${todo.id}" class="${todo.complete?"checked ":""}todo-item d-flex justify-content-between align-items-center flex-row mx-3 my-2">\n\t\t\t\t\t<button class="circle-small checkbox mx-3"></button>\n\t\t\t\t\t<div class="todo-item--title text-left w-100">\n\t\t\t\t\t\t<h4 contenteditable="true" tabindex="${todo.id}" class="editable">${todo.text}</h4>\n\t\t\t\t\t</div>\n\t\t\t\t\t<i style="color:#E02020" class="delete fas fa-trash p-3"></i>\n\t\t\t\t</div>`;todo.complete&&console.log(todo),this.todoList.innerHTML+=todoItem});console.log(todos)}_initLocalListeners(){this.todoList.addEventListener("input",event=>{"editable"===event.target.className&&(this._temporaryTodoText=event.target.innerText)})}bindAddTodo(handler){this.form.addEventListener("submit",event=>{event.preventDefault(),this._todoText&&(handler(this._todoText),this._resetInput())})}bindDeleteTodo(handler){this.todoList.addEventListener("click",event=>{if(event.target.className.includes("delete")){const id=parseInt(event.target.parentElement.id);handler(id)}})}bindEditTodo(handler){this.todoList.addEventListener("focusout",event=>{if(this._temporaryTodoText){const id=parseInt(event.target.parentElement.parentElement.id);handler(id,this._temporaryTodoText),this._temporaryTodoText=""}})}bindToggleTodo(handler){this.todoList.addEventListener("click",event=>{if(event.target.className.includes("checkbox")){const id=parseInt(event.target.parentElement.id);handler(id)}})}createElement(tag,name){const element=document.createElement(tag);return name&&element.classList.add(name),element}get _todoText(){return this.input.value}_resetInput(){this.input.value=""}}class Controller{constructor(model,view){this.model=model,this.view=view,this.model.bindTodoListChanged(this.onTodoListChanged),this.view.bindAddTodo(this.handleAddTodo),this.view.bindEditTodo(this.handleEditTodo),this.view.bindDeleteTodo(this.handleDeleteTodo),this.view.bindToggleTodo(this.handleToggleTodo),this.onTodoListChanged(this.model.todos)}onTodoListChanged=todos=>{this.view.displayTodos(todos)};handleAddTodo=todoText=>{this.model.addTodo(todoText)};handleEditTodo=(id,todoText)=>{this.model.editTodo(id,todoText)};handleDeleteTodo=id=>{this.model.deleteTodo(id)};handleToggleTodo=id=>{this.model.toggleTodo(id)}}const app=new Controller(new Model,new View);